// <auto-generated />
using System;
using Backend.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20240501021955_CorrectFacturayServicio")]
    partial class CorrectFacturayServicio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.DAL.Entities.Acudiente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("Acudientes");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Empleado", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("HoraFin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoraInicio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServicioId")
                        .HasColumnType("bigint");

                    b.Property<float>("Sueldo")
                        .HasColumnType("real");

                    b.Property<string>("TipoEmpleado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServicioId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Factura", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("IdServicio")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AcudienteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdAcudiente")
                        .HasColumnType("bigint");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ValorTotal")
                        .HasColumnType("real");

                    b.HasKey("Id", "IdServicio");

                    b.HasIndex("AcudienteId");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Gerente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("FechaContrato")
                        .HasColumnType("datetime2");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Gerentes");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Paciente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AcudienteId")
                        .HasColumnType("bigint");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Peso")
                        .HasColumnType("real");

                    b.Property<string>("Raza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TipoAnimal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcudienteId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Producto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CantUso")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Requiere", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint");

                    b.Property<long>("IdServicio")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServicioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ServicioId");

                    b.ToTable("Requieres");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Servicio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CantServicio")
                        .HasColumnType("int");

                    b.Property<string>("DescDiagnostico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FacturaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FacturaIdServicio")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.Property<string>("PrescDiagnostico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoServicio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacturaId", "FacturaIdServicio");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Backend.DAL.Entities.TelAcudiente", b =>
                {
                    b.Property<long>("IdAcudiente")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("Telefono")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("IdAcudiente", "Telefono");

                    b.ToTable("TelAcudientes");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<long>("Telefono")
                        .HasColumnType("bigint");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("User")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Empleado", b =>
                {
                    b.HasOne("Backend.DAL.Entities.Servicio", null)
                        .WithMany("IdEmpleado")
                        .HasForeignKey("ServicioId");

                    b.HasOne("Backend.DAL.Entities.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("Backend.DAL.Entities.Empleado", "UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Factura", b =>
                {
                    b.HasOne("Backend.DAL.Entities.Acudiente", "Acudiente")
                        .WithMany()
                        .HasForeignKey("AcudienteId");

                    b.Navigation("Acudiente");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Gerente", b =>
                {
                    b.HasOne("Backend.DAL.Entities.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("Backend.DAL.Entities.Gerente", "UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Paciente", b =>
                {
                    b.HasOne("Backend.DAL.Entities.Acudiente", null)
                        .WithMany("IdPaciente")
                        .HasForeignKey("AcudienteId");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Requiere", b =>
                {
                    b.HasOne("Backend.DAL.Entities.Producto", "Producto")
                        .WithMany("Requiere")
                        .HasForeignKey("ProductoId");

                    b.HasOne("Backend.DAL.Entities.Servicio", "Servicio")
                        .WithMany("Requiere")
                        .HasForeignKey("ServicioId");

                    b.Navigation("Producto");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Servicio", b =>
                {
                    b.HasOne("Backend.DAL.Entities.Factura", "Factura")
                        .WithMany("Servicio")
                        .HasForeignKey("FacturaId", "FacturaIdServicio")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("Backend.DAL.Entities.TelAcudiente", b =>
                {
                    b.HasOne("Backend.DAL.Entities.Acudiente", "Acudiente")
                        .WithMany("TelAcudiente")
                        .HasForeignKey("IdAcudiente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acudiente");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Acudiente", b =>
                {
                    b.Navigation("IdPaciente");

                    b.Navigation("TelAcudiente");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Factura", b =>
                {
                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Producto", b =>
                {
                    b.Navigation("Requiere");
                });

            modelBuilder.Entity("Backend.DAL.Entities.Servicio", b =>
                {
                    b.Navigation("IdEmpleado");

                    b.Navigation("Requiere");
                });
#pragma warning restore 612, 618
        }
    }
}
